Index: app/src/main/java/com/darkempire78/opencalculator/MainActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.darkempire78.opencalculator\r\n\r\nimport android.animation.LayoutTransition\r\nimport android.content.Intent\r\nimport android.content.res.Configuration\r\nimport android.net.Uri\r\nimport android.os.Build\r\nimport android.os.Bundle\r\nimport android.view.HapticFeedbackConstants\r\nimport android.view.MenuItem\r\nimport android.view.View\r\nimport android.widget.*\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport kotlinx.android.synthetic.main.activity_main.*\r\nimport org.mariuszgromada.math.mxparser.Expression\r\nimport org.mariuszgromada.math.mxparser.mXparser\r\n\r\n\r\nclass MainActivity : AppCompatActivity() {\r\n\r\n    // https://stackoverflow.com/questions/34197026/android-content-pm-applicationinfo-android-content-context-getapplicationinfo\r\n    private var isInvButtonClicked = false\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n\r\n        // Themes\r\n        Themes(this)\r\n\r\n        when (MyPreferences(this).darkMode) {\r\n            // System\r\n            -1 -> {\r\n                if (checkIfDarkModeIsEnabledByDefault()) {\r\n                    setTheme(R.style.darkTheme)\r\n                } else {\r\n                    setTheme(R.style.AppTheme)\r\n                }\r\n            }\r\n            // Light mode\r\n            0 -> {\r\n                setTheme(R.style.AppTheme)\r\n            }\r\n            // Dark mode\r\n            1 -> {\r\n                setTheme(R.style.darkTheme)\r\n            }\r\n            // amoled mode\r\n            2 -> {\r\n                setTheme(R.style.amoledTheme)\r\n            }\r\n            // Material You\r\n            3->\r\n            {\r\n                setTheme(R.style.materialYou)\r\n            }\r\n            else -> {\r\n                if (checkIfDarkModeIsEnabledByDefault()) {\r\n                    setTheme(R.style.darkTheme)\r\n                } else {\r\n                    setTheme(R.style.AppTheme)\r\n                }\r\n            }\r\n        }\r\n\r\n        setContentView(R.layout.activity_main)\r\n\r\n        // check the current selected theme\r\n        Themes(this).checkTheme()\r\n\r\n        // Disable the keyboard on display EditText\r\n        input.showSoftInputOnFocus = false\r\n        \r\n        // https://www.geeksforgeeks.org/how-to-detect-long-press-in-android/\r\n        backspaceButton.setOnLongClickListener {\r\n            input.setText(\"\")\r\n            resultDisplay.setText(\"\")\r\n            true\r\n        }\r\n\r\n        // Set degree by default\r\n        mXparser.setDegreesMode()\r\n\r\n        // Set default animations and disable the fade out default animation\r\n        // https://stackoverflow.com/questions/19943466/android-animatelayoutchanges-true-what-can-i-do-if-the-fade-out-effect-is-un\r\n        val lt = LayoutTransition()\r\n        lt.disableTransitionType(LayoutTransition.DISAPPEARING)\r\n        tableLayout.layoutTransition = lt\r\n    }\r\n\r\n    private fun checkIfDarkModeIsEnabledByDefault (): Boolean =\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) {\r\n            resources.configuration.isNightModeActive\r\n        } else\r\n            when (this.resources?.configuration?.uiMode?.and(Configuration.UI_MODE_NIGHT_MASK)) {\r\n                Configuration.UI_MODE_NIGHT_YES -> true\r\n                Configuration.UI_MODE_NIGHT_NO -> false\r\n                Configuration.UI_MODE_NIGHT_UNDEFINED -> true\r\n                else -> true\r\n            }\r\n\r\n    fun selectThemeDialog(menuItem: MenuItem) {\r\n        Themes(this).openDialogThemeSelector()\r\n    }\r\n\r\n    fun openAppMenu(view: View) {\r\n        val popup = PopupMenu(this, view)\r\n        val inflater = popup.menuInflater\r\n        inflater.inflate(R.menu.app_menu, popup.menu)\r\n        popup.menu.findItem(R.id.app_menu_vibration_button).isChecked = MyPreferences(this).vibrationMode;\r\n        popup.show()\r\n    }\r\n\r\n    fun checkVibration(menuItem: MenuItem) {\r\n        MyPreferences(this).vibrationMode = !menuItem.isChecked\r\n    }\r\n\r\n    fun openGithubLink(menuItem: MenuItem) {\r\n        val browserIntent = Intent(\r\n            Intent.ACTION_VIEW,\r\n            Uri.parse(\"https://github.com/Darkempire78/OpenCalc\")\r\n        )\r\n        startActivity(browserIntent)\r\n    }\r\n\r\n    fun keyVibration(view : View) {\r\n        if (MyPreferences(this).vibrationMode) {\r\n            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O_MR1) {\r\n                view.performHapticFeedback(HapticFeedbackConstants.KEYBOARD_PRESS)\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun updateDisplay(view: View, value: String) {\r\n        // Vibrate when key pressed\r\n        keyVibration(view)\r\n        \r\n        val formerValue = input.text.toString()\r\n        val cursorPosition = input.selectionStart\r\n        val leftValue = formerValue.subSequence(0, cursorPosition).toString()\r\n        val rightValue = formerValue.subSequence(cursorPosition, formerValue.length).toString()\r\n\r\n        val newValue = leftValue + value + rightValue\r\n\r\n        // Update Display\r\n        input.setText(newValue)\r\n\r\n        // Increase cursor position\r\n        input.setSelection(cursorPosition + value.length)\r\n\r\n        // Update resultDisplay\r\n        updateResultDisplay()\r\n    }\r\n\r\n    private fun updateResultDisplay() {\r\n        var calculation = input.text.toString()\r\n\r\n        if (calculation != \"\") {\r\n            calculation = calculation.replace('×', '*')\r\n            calculation = calculation.replace('÷', '/')\r\n            calculation = calculation.replace(\"log\", \"log10\")\r\n\r\n            // Add \")\" which lack\r\n            var openParentheses = 0\r\n            var closeParentheses = 0\r\n\r\n            for (i in 0..calculation.length-1) {\r\n                if (calculation[i] == '(') {\r\n                    openParentheses += 1\r\n                }\r\n                if (calculation[i] == ')') {\r\n                    closeParentheses += 1\r\n                }\r\n            }\r\n            if (closeParentheses < openParentheses) {\r\n                for (i in 0..openParentheses-closeParentheses-1) {\r\n                    calculation += ')'\r\n                }\r\n            }\r\n\r\n            val exp = Expression(calculation)\r\n            var result = exp.calculate().toString()\r\n\r\n            if (result != \"NaN\" && result != \"Infinity\") {\r\n                // If the double ends with .0 we remove the .0\r\n                if ((exp.calculate() * 10) % 10 == 0.0) {\r\n                    result = String.format(\"%.0f\", exp.calculate())\r\n                    if (result != calculation) {\r\n                        resultDisplay.setText(result)\r\n                    } else {\r\n                        resultDisplay.setText(\"\")\r\n                    }\r\n                } else {\r\n                    if (result != calculation) {\r\n                        resultDisplay.setText(result)\r\n                    } else {\r\n                        resultDisplay.setText(\"\")\r\n                    }\r\n                }\r\n            } else if (result == \"Infinity\") {\r\n                resultDisplay.setText(\"Infinity\")\r\n            } else {\r\n                resultDisplay.setText(\"\")\r\n            }\r\n        } else {\r\n            resultDisplay.setText(\"\")\r\n        }\r\n    }\r\n\r\n    fun zeroButton(view: View) {\r\n        updateDisplay(view, \"0\")\r\n    }\r\n\r\n    fun oneButton(view: View) {\r\n        updateDisplay(view, \"1\")\r\n    }\r\n\r\n    fun twoButton(view: View) {\r\n        updateDisplay(view, \"2\")\r\n    }\r\n\r\n    fun threeButton(view: View) {\r\n        updateDisplay(view, \"3\")\r\n    }\r\n\r\n    fun fourButton(view: View) {\r\n        updateDisplay(view, \"4\")\r\n    }\r\n\r\n    fun fiveButton(view: View) {\r\n        updateDisplay(view, \"5\")\r\n    }\r\n\r\n    fun sixButton(view: View) {\r\n        updateDisplay(view, \"6\")\r\n    }\r\n\r\n    fun sevenButton(view: View) {\r\n        updateDisplay(view, \"7\")\r\n    }\r\n\r\n    fun eightButton(view: View) {\r\n        updateDisplay(view, \"8\")\r\n    }\r\n\r\n    fun nineButton(view: View) {\r\n        updateDisplay(view, \"9\")\r\n    }\r\n\r\n    fun addButton(view: View) {\r\n        updateDisplay(view, \"+\")\r\n    }\r\n\r\n    fun substractButton(view: View) {\r\n        updateDisplay(view, \"-\")\r\n    }\r\n\r\n    fun pointButton(view: View) {\r\n        updateDisplay(view, \".\")\r\n    }\r\n\r\n    fun devideButton(view: View) {\r\n        updateDisplay(view, \"÷\")\r\n    }\r\n\r\n    fun multiplyButton(view: View) {\r\n        updateDisplay(view, \"×\")\r\n    }\r\n\r\n    fun exponentButton(view: View) {\r\n        updateDisplay(view, \"^\")\r\n    }\r\n\r\n    fun sinusButton(view: View) {\r\n        if (!isInvButtonClicked) {\r\n            updateDisplay(view, \"sin(\")\r\n        } else {\r\n            updateDisplay(view, \"arcsin(\")\r\n        }\r\n    }\r\n\r\n    fun cosinusButton(view: View) {\r\n        if (!isInvButtonClicked) {\r\n            updateDisplay(view, \"cos(\")\r\n        } else {\r\n            updateDisplay(view, \"arccos(\")\r\n        }\r\n\r\n    }\r\n\r\n    fun tangentButton(view: View) {\r\n        if (!isInvButtonClicked) {\r\n            updateDisplay(view, \"tan(\")\r\n        } else {\r\n            updateDisplay(view, \"arctan(\")\r\n        }\r\n    }\r\n\r\n    fun eButton(view: View) {\r\n        updateDisplay(view, \"e\")\r\n    }\r\n\r\n    fun naturalLogarithmButton(view: View) {\r\n        if (!isInvButtonClicked) {\r\n            updateDisplay(view, \"ln(\")\r\n        } else {\r\n            updateDisplay(view, \"exp(\")\r\n        }\r\n\r\n    }\r\n\r\n    fun logarithmButton(view: View) {\r\n        if (!isInvButtonClicked) {\r\n            updateDisplay(view, \"log(\")\r\n        } else {\r\n            updateDisplay(view, \"10^\")\r\n        }\r\n    }\r\n\r\n    fun piButton(view: View) {\r\n        updateDisplay(view, \"π\")\r\n    }\r\n\r\n    fun factorialButton(view: View) {\r\n        updateDisplay(view, \"!\")\r\n    }\r\n\r\n    fun squareButton(view: View) {\r\n        if (!isInvButtonClicked) {\r\n            updateDisplay(view, \"√\")\r\n        } else {\r\n            updateDisplay(view, \"^2\")\r\n        }\r\n\r\n    }\r\n\r\n    fun devideBy100(view: View) {\r\n        updateDisplay(view, \"%\")\r\n    }\r\n\r\n    fun degreeButton(view: View) {\r\n        keyVibration(view)\r\n\r\n        if (degreeButton.text.toString() == \"DEG\") {\r\n            degreeButton.text = \"RAD\"\r\n            mXparser.setRadiansMode()\r\n        } else {\r\n            degreeButton.text = \"DEG\"\r\n            mXparser.setDegreesMode()\r\n        }\r\n\r\n        degreeTextView.text = degreeButton.text.toString()\r\n        updateResultDisplay()\r\n    }\r\n\r\n    fun invButton(view: View) {\r\n        keyVibration(view)\r\n\r\n        if (!isInvButtonClicked) {\r\n            isInvButtonClicked = true\r\n\r\n            // change buttons\r\n            sinusButton.setText(R.string.sinusInv)\r\n            cosinusButton.setText(R.string.cosinusInv)\r\n            tangentButton.setText(R.string.tangentInv)\r\n            naturalLogarithmButton.setText(R.string.naturalLogarithmInv)\r\n            logarithmButton.setText(R.string.logarithmInv)\r\n            squareButton.setText(R.string.squareInv)\r\n        } else {\r\n            isInvButtonClicked = false\r\n\r\n            // change buttons\r\n            sinusButton.setText(R.string.sinus)\r\n            cosinusButton.setText(R.string.cosinus)\r\n            tangentButton.setText(R.string.tangent)\r\n            naturalLogarithmButton.setText(R.string.naturalLogarithm)\r\n            logarithmButton.setText(R.string.logarithm)\r\n            squareButton.setText(R.string.square)\r\n        }\r\n    }\r\n\r\n    fun clearButton(view: View) {\r\n        keyVibration(view)\r\n\r\n        input.setText(\"\")\r\n\r\n        // Clear resultDisplay\r\n        resultDisplay.setText(\"\")\r\n    }\r\n\r\n    fun equalsButton(view: View) {\r\n        keyVibration(view)\r\n\r\n        var calculation = input.text.toString()\r\n        calculation = calculation.replace('×', '*')\r\n        calculation = calculation.replace('÷', '/')\r\n        calculation = calculation.replace(\"log\", \"log10\")\r\n\r\n        if (calculation != \"\") {\r\n            // Add \")\" which lack\r\n            var openParentheses = 0\r\n            var closeParentheses = 0\r\n\r\n            for (i in 0..calculation.length-1) {\r\n                if (calculation[i] == '(') {\r\n                    openParentheses += 1\r\n                }\r\n                if (calculation[i] == ')') {\r\n                    closeParentheses += 1\r\n                }\r\n            }\r\n            if (closeParentheses < openParentheses) {\r\n                for (i in 0..openParentheses-closeParentheses-1) {\r\n                    calculation += ')'\r\n                }\r\n            }\r\n\r\n            val exp = Expression(calculation)\r\n            var result = exp.calculate().toString()\r\n\r\n            mXparser.consolePrintln(\"Res: \" + exp.expressionString.toString() + \" = \" + exp.calculate())\r\n\r\n            if (result != \"NaN\" && result != \"Infinity\") {\r\n                if ((exp.calculate() * 10) % 10 == 0.0) {\r\n                    result = String.format(\"%.0f\", exp.calculate())\r\n                    input.setText(result)\r\n                } else {\r\n                    input.setText(result)\r\n                }\r\n                // Set cursor\r\n                input.setSelection(input.text.length)\r\n\r\n                // Clear resultDisplay\r\n                resultDisplay.setText(\"\")\r\n            } else {\r\n                resultDisplay.setText(result)\r\n            }\r\n        } else {\r\n            resultDisplay.setText(\"\")\r\n        }\r\n    }\r\n\r\n    fun parenthesesButton(view: View) {\r\n        val cursorPosition = input.selectionStart\r\n        val textLength = input.text.length\r\n\r\n        var openParentheses = 0\r\n        var closeParentheses = 0\r\n\r\n        val text = input.text.toString()\r\n\r\n        // https://kotlinlang.org/docs/ranges.html\r\n        // https://www.reddit.com/r/Kotlin/comments/couh07/getting_error_operator_cannot_be_applied_to_char/\r\n        for (i in 0..cursorPosition-1) {\r\n            if (text[i] == '(') {\r\n                openParentheses += 1\r\n            }\r\n            if (text[i] == ')') {\r\n                closeParentheses += 1\r\n            }\r\n        }\r\n\r\n        if (openParentheses == closeParentheses || input.text.toString().subSequence(\r\n                textLength - 1,\r\n                textLength\r\n            ) == \"(\") {\r\n            updateDisplay(view, \"(\")\r\n        } else if (closeParentheses < openParentheses && input.text.toString().subSequence(\r\n                textLength - 1,\r\n                textLength\r\n            ) != \"(\") {\r\n            updateDisplay(view, \")\")\r\n        }\r\n\r\n        updateResultDisplay()\r\n    }\r\n\r\n    fun backspaceButton(view: View) {\r\n        keyVibration(view)\r\n\r\n        val cursorPosition = input.selectionStart\r\n        val textLength = input.text.length\r\n\r\n        if (cursorPosition != 0 && textLength != 0) {\r\n            val newValue = input.text.subSequence(0, cursorPosition - 1).toString() + input.text.subSequence(\r\n                cursorPosition,\r\n                textLength\r\n            ).toString()\r\n            input.setText(newValue)\r\n\r\n            input.setSelection(cursorPosition - 1)\r\n        }\r\n\r\n        updateResultDisplay()\r\n    }\r\n\r\n    fun scientistModeSwitchButton(view: View) {\r\n        if(scientistModeRow2.visibility != View.VISIBLE)\r\n        {\r\n            scientistModeRow2.visibility = View.VISIBLE\r\n            scientistModeRow3.visibility = View.VISIBLE\r\n            scientistModeSwitchButton.setImageResource(R.drawable.ic_baseline_keyboard_arrow_up_24)\r\n            degreeTextView.visibility = View.VISIBLE\r\n            degreeTextView.text = degreeButton.text.toString()\r\n        } else {\r\n            scientistModeRow2.visibility = View.GONE\r\n            scientistModeRow3.visibility = View.GONE\r\n            scientistModeSwitchButton.setImageResource(R.drawable.ic_baseline_keyboard_arrow_down_24)\r\n            degreeTextView.visibility = View.GONE\r\n            degreeTextView.text = degreeButton.text.toString()\r\n        }\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/darkempire78/opencalculator/MainActivity.kt b/app/src/main/java/com/darkempire78/opencalculator/MainActivity.kt
--- a/app/src/main/java/com/darkempire78/opencalculator/MainActivity.kt	(revision e1b6eb6873a49b76dd44a36a1c3e598924c729e4)
+++ b/app/src/main/java/com/darkempire78/opencalculator/MainActivity.kt	(date 1660042942405)
@@ -135,14 +135,17 @@
         keyVibration(view)
         
         val formerValue = input.text.toString()
+        var formattedNumber = NumberFormatter.removeSeparators(formerValue)
+
         val cursorPosition = input.selectionStart
-        val leftValue = formerValue.subSequence(0, cursorPosition).toString()
-        val rightValue = formerValue.subSequence(cursorPosition, formerValue.length).toString()
+        val leftValue = formattedNumber.subSequence(0, cursorPosition).toString()
+        val rightValue = formattedNumber.subSequence(cursorPosition, formattedNumber.length).toString()
 
         val newValue = leftValue + value + rightValue
+        formattedNumber = NumberFormatter.addSeparators(newValue)
 
         // Update Display
-        input.setText(newValue)
+        input.setText(formattedNumber)
 
         // Increase cursor position
         input.setSelection(cursorPosition + value.length)
@@ -478,14 +481,17 @@
         keyVibration(view)
 
         val cursorPosition = input.selectionStart
-        val textLength = input.text.length
+        var formattedNumber = NumberFormatter.removeSeparators(input.text.toString())
+        val textLength = formattedNumber.length
 
         if (cursorPosition != 0 && textLength != 0) {
-            val newValue = input.text.subSequence(0, cursorPosition - 1).toString() + input.text.subSequence(
+            val newValue = formattedNumber.subSequence(0, cursorPosition - 1).toString() + formattedNumber.subSequence(
                 cursorPosition,
                 textLength
             ).toString()
-            input.setText(newValue)
+
+            formattedNumber = NumberFormatter.addSeparators(newValue)
+            input.setText(formattedNumber)
 
             input.setSelection(cursorPosition - 1)
         }
Index: .idea/deploymentTargetDropDown.xml
===================================================================
diff --git a/.idea/deploymentTargetDropDown.xml b/.idea/deploymentTargetDropDown.xml
deleted file mode 100644
--- a/.idea/deploymentTargetDropDown.xml	(revision e1b6eb6873a49b76dd44a36a1c3e598924c729e4)
+++ /dev/null	(revision e1b6eb6873a49b76dd44a36a1c3e598924c729e4)
@@ -1,17 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="deploymentTargetDropDown">
-    <runningDeviceTargetSelectedWithDropDown>
-      <Target>
-        <type value="RUNNING_DEVICE_TARGET" />
-        <deviceKey>
-          <Key>
-            <type value="SERIAL_NUMBER" />
-            <value value="192.168.137.46:5555" />
-          </Key>
-        </deviceKey>
-      </Target>
-    </runningDeviceTargetSelectedWithDropDown>
-    <timeTargetWasSelectedWithDropDown value="2022-08-03T07:03:51.108318Z" />
-  </component>
-</project>
\ No newline at end of file
